/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/c250e55a-05a9-4042-8cbe-21c8a1698c9e 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudColor rgb_LED;
  bool currentState;
  bool previousState;
  bool securityActivation;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"


#define SENSOR_PIN D4 // Motion sensor pin

// things for HW484 sound sensor and RGB LED
#define RedLED_PIN D8
#define GreenLED_PIN D7
#define BlueLED_PIN D6
#define RAW_VALUE A0 // Analog sound input



// millis for timing purposes
unsigned long startMillis;
unsigned long currentMillis;
const unsigned long period = 500;
int RED_LEDvalue1, GREEN_LEDvalue2;



//the time we give the sensor to calibrate (10-60 secs according to the datasheet)
int calibrationTime = 30;  

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // Defined in thingProperties.h
  initProperties();
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
 pinMode(SENSOR_PIN, INPUT)  ;    // initialize sensor as an input
  pinMode(RAW_VALUE, INPUT);   // Set pin A0 as an input
  pinMode(RedLED_PIN, OUTPUT);    // RBGLED1 as output
  pinMode(GreenLED_PIN, OUTPUT);    // RBGLED2 as output
  pinMode(BlueLED_PIN, OUTPUT);    // RBGLED3 as output
  startMillis = millis();


  //give the sensor some time to calibrate
  Serial.print("calibrating sensor ");
    for(int i = 0; i < calibrationTime; i++){
      Serial.print(".");
      delay(1000);
      }
    Serial.println(" done");
    Serial.println("SENSOR ACTIVE");
    delay(50);
 
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  // things for PIR motion sensor
currentState = LOW; // current state of sensor pin
previousState = LOW; // previous state of sensor pin

}

void loop() {
  ArduinoCloud.update();
  // Your code here 
if(securityActivation){
  security();
}
}



/*
  Since SecurityActivation is READ_WRITE variable, onSecurityActivationChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSecurityActivationChange()  {
  // Add your code here to act upon SecurityActivation change
  
  if(securityActivation){
    rgb_LED = {0,100,100}; //Set Hue/Saturation/brightness
  } else rgb_LED = {0,0,0};
  
}

void security(){
  
  previousState = currentState; // store old motion state
  currentState = digitalRead(SENSOR_PIN); // read new motion state

  if (previousState == LOW && currentState == HIGH) { // turn on LED if motion detected
    Serial.println("Motion detected!");
    //digitalWrite(led, HIGH);
  }
  else
  if (previousState == HIGH && currentState == LOW) { // turn off LED if motion stops
    Serial.println("Motion stopped.");
    //digitalWrite(led, LOW);
  }

  int val_analog = analogRead(RAW_VALUE); // analog value from sound sensor
  float average = 0;

  for (int i = 0; i < 5; i++) { //loop to make average of 5 measurements
    average += val_analog;
  }
  average /= 5; // calculate average sound level
  
  currentMillis = millis(); //use millis to define how often change happens

  if (currentMillis - startMillis >= period) { //test whether the period has elapsed
    //Serial.print("Current volume level: ");
    //Serial.println(average);
   Serial.print("Current motion state: ");
   Serial.println(currentState);
      if (average <= 100) {
      // For sound level below 100 LED is green
       RED_LEDvalue1 = 0;
       GREEN_LEDvalue2 = 255;
       rgb_LED = {120,100,100};
      } else {
       // Above 100, LED goes red
       RED_LEDvalue1 = 255;
       GREEN_LEDvalue2 = 0;
       rgb_LED = {0,100,100};
  }
    // Write the values to the LED pins
    analogWrite(RedLED_PIN, RED_LEDvalue1); // write to red
    analogWrite(GreenLED_PIN, GREEN_LEDvalue2); // write to green
    analogWrite(BlueLED_PIN, 0); // blue is not used
    startMillis = currentMillis;
  }
}



















