// NTPClient - Version: Latest

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/c16bd2b7-d009-4a8f-803f-fb1a38481c72

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String user_scan;
  bool activateSecurity;
  bool denyEntry;
  bool lEDSTATE;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <ESP8266Firebase.h> //Library by https://github.com/Rupakpoddar/ESP8266Firebase
#include <ESP8266WiFi.h>
#include <NTPClient.h> //Library by https://github.com/arduino-libraries/NTPClient/
#include <Servo.h>
#include <SPI.h>
#include <MFRC522.h>
#include <WiFiUdp.h>

// Our electronics
#define RST_PIN D1  // D1
#define SS_PIN D2   // D2
#define BUZZER D8   // D8
#define SERVO_PIN 2 // D4
#define LED D0      // D0

// Firebase reference URL
#define REFERENCE_URL "https://proj1-2189f-default-rtdb.europe-west1.firebasedatabase.app/"
unsigned long previousMillis = 0;
unsigned long interval = 1000;

// UTC+1
const long UTC_PLUS_ONE = 3600;

// Create instances for board
WiFiUDP ntpUDP;
Servo servo;
NTPClient timeClient(ntpUDP, "dk.pool.ntp.org", UTC_PLUS_ONE);
MFRC522 mfrc522(SS_PIN, RST_PIN); // Create MFRC522 instance
Firebase firebase(REFERENCE_URL); // firebase instance
String UID, name;
int value_clock;

void setup()
{
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Inititilize MFRC
  SPI.begin();        // Init SPI bus
  mfrc522.PCD_Init(); // Init MFRC522
  pinMode(BUZZER, OUTPUT);
  servo.attach(SERVO_PIN);
  pinMode(LED, OUTPUT);
  servo.write(0);

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  timeClient.begin();

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop()
{
  ArduinoCloud.update();

  // Your code here
  DOOR_OPEN();
  timeClient.update();
}

void DOOR_OPEN()
{

  unsigned long currentMillis = millis();

  // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.
  if (!mfrc522.PICC_IsNewCardPresent())
  {
    return;
  }

  // Select one of the cards
  if (!mfrc522.PICC_ReadCardSerial())
  {
    return;
  }

  UID = "";
  for (byte i = 0; i < mfrc522.uid.size; i++)
  {
    UID.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : ""));
    UID.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  UID.toUpperCase();

  name = firebase.getString(UID + "/Name");
  value_clock = firebase.getInt(UID + "/Clock");

  /*
  ul is what firebase registeres when a scanned UID is not from the database.
  the getString calls out our databse to check if the scanned uid is not ul and from the database.
  */
  Serial.print("Querying for UID: ");
  Serial.println(UID);

  if (firebase.getString(UID) != "ul" && value_clock == 0 && !denyEntry)
  {
    firebase.setInt(UID + "/Clock", 1);
    firebase.pushString("Timestamp/" + name + "/Clockin", timeClient.getFormattedTime());
    Serial.println(name);
    Serial.println("Logged ind");

    // Card with matching UID
    if (currentMillis - previousMillis >= interval)
    {
      // save the last time you blinked the LED
      previousMillis = currentMillis;
      tone(BUZZER, 440, 500); // Play tone
      user_scan = "Logged in: " + name + "\t Time: " + timeClient.getFormattedTime();

      // turn on LED and turn servo motor (office door)
      ledAccess();
    }
  }
  else if (value_clock == 1)
  {
    firebase.pushString("Timestamp/" + name + "/Clockout", timeClient.getFormattedTime());
    firebase.setInt(UID + "/Clock", 0);
    ledAccess();
    Serial.println(name);
    Serial.println("Logged out");
    user_scan = "Logged out: " + name + "\t Time: " + timeClient.getFormattedTime();
  }
  else
  {
    // Card with non-matching UID
    tone(BUZZER, 200, 500);
    user_scan = "Access denied";
  }
}

/*
  Since ActivateSecurity is READ_WRITE variable, onActivateSecurityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onActivateSecurityChange()
{
  // Add your code here to act upon ActivateSecurity change
  Serial.println("deny Entry change");
  denyEntry = !denyEntry;
  //(activateSecurity) ? servo.write(130) : servo.write(0) ;
}

// Turn the servo motor and light up LED
void ledAccess()
{
  lEDSTATE = HIGH;
  digitalWrite(LED, lEDSTATE);
  servo.write(130); // Make servo go to 0 degrees
  delay(5000);
  servo.write(0); // Make servo go to 180 degrees
  lEDSTATE = LOW;
  digitalWrite(LED, lEDSTATE);
  delay(1000);
}

/*
  Since LEDSTATE is READ_WRITE variable, onLEDSTATEChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLEDSTATEChange()
{
  // Add your code here to act upon LEDSTATE change
}
